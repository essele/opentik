#!../support/bin/lua

--package.cpath="./?.so;/usr/lib64/lua/5.1/?.so;/usr/lib64/lua/5.1/loadall.so"

dofile("lib/lib.lua")

lpeg = require("lpeg")



local P, B, S, R, V, C, Cp, Cc, Ct = lpeg.P, lpeg.B, lpeg.S, lpeg.R, lpeg.V, lpeg.C, lpeg.Cp, lpeg.Cc, lpeg.Ct

local function token(id, patt) return Ct(Cc(id) * Cp() * C(patt) * Cp()) end

local dump = lib.cf.dump

local safechar = R("AZ", 'az', "\127\255") + P"_"

local whitespace = S("\r\n\f\t ")^1
local word = token("word", (R("AZ", 'az', '09') + S"+-_,<>|:!@$%^&*")^1)

local binop = token("binop", (-B(safechar) * P"and" * -safechar) + (-safechar * P"or" * -safechar) + 
								P"<=" + P">=" + P"!=" + P"&&" + P"||" + S"+-*/<>=|^&" )

local boolean = token("boolean", (P"true" + P"false") * -safechar)
local decnum = R"09"^1
local hexnum = P"0" * S"xX" * R("09", "AF", "af")^1
local number = token('number', (hexnum + decnum) * -safechar)

local oparen = token("oparen", P"(")
local cparen = token("cparen", P")")


local exprs = P{
	"exprs",

-- Note: "word" is invalid in an expression, but we leave it here so we can
-- syntax highlight appropriately
	s_expr = token("s_expr", oparen * (whitespace + number + boolean + binop + V"expr" + V"s_expr" + word)^0),
	expr = token("expr", oparen * (whitespace + number + boolean + binop + V"expr" + word)^1 * cparen),
	exprs = V"expr" + V"s_expr",
}


local any_token = whitespace + exprs + number + token("error", 1)

local table_of_tokens = Ct(any_token ^ 0)


local ti = c.term

--
-- Init and go raw...
--
ti.setupterm()
ti.term_raw()

	keymap = {
		[ti.key_left] =					"LEFT",
		[ti.key_right] =				"RIGHT",
		[ti.key_up] =					"UP",
		[ti.key_down] =					"DOWN",
		["\000"] =						"WATCH",
		["\009"] =						"TAB",
		["\127"] =						"BACKSPACE",
		["\n"] =						"ENTER",
		["\003"] =						"INT",		  -- Ctr-C
		["\004"] =						"EOF",		  -- Ctrl-D
		["\028"] =						"RESIZE",	   -- Window Resize
		["\001"] =						"GO_BOL",	   -- Ctrl-A beginning of line
		["\002"] =						"LEFT",		 -- Ctrl-B back one char
		["\005"] =						"GO_EOL",	   -- Ctrl-E end of line
		["\006"] =						"RIGHT",		-- Ctrl-F forward one char
		["\027f"] =						"GO_FWORD",	 -- Alt-F forward one word
		["\027b"] =						"GO_BWORD",	 -- Alt-B backward one work
		["\027"] =						"ESCAPE",
	}
	--
	-- VT100 doesn't have a delete key???
	--
	if ti.key_dc then keymap[ti.key_dc] = "DELETE" end



--ti.out(ti.parm_up_cursor, 5);
--ti.out("FRED");

local function now()
	local timeval = posix.sys.time.gettimeofday()
	return math.floor((timeval.tv_sec * 1000) + (timeval.tv_usec/1000))
end



local function read()
	local buf

	--
	-- Wait for our first key indenfinitely, then only wait a max time for
	-- anything after escape
	--
	local fds = {
		[0] = { events = { IN = true } },
	}

	local rc = posix.poll.poll(fds, -1)
	if not rc then
		print("nil")
		return nil
	end

	if fds[0].revents then buf = posix.unistd.read(0, 1) end
	if buf ~= "\027" then return keymap[buf] or buf end

	-- We have an escape sequence we need to read
	local time = 200
	while time > 0 do
		local before = now()
		if posix.poll.poll(fds, time) == 0 then break end

		local c = posix.unistd.read(0, 1)
		buf = buf .. c

		-- detect end, but not for two special cases
		if not (#buf == 2 and (c == "[" or c == "O")) then
			if string.byte(c) >= 64 and string.byte(c) <= 128 then break end
		end
		time = time - (now() - before)
	end
	return keymap[buf] or buf
end


local width = ti.columns
local height = ti.lines

local row, col = 0, 0

local function row_and_col_from_pos(pos)
	return math.floor(pos/width), pos%width
end

local function output(str)
	local n = #str
	local newpos = (row * width) + col + n

	ti.out(str)
	row, col = row_and_col_from_pos(newpos)
	
	if (n > 0 and col == 0) and ti.auto_right_margin then
		if ti.eat_newline_glitch then ti.out(ti.carriage_return) end
		ti.out(ti.carriage_return)
		ti.out(ti.cursor_down)
	end
end

local function move_to(r, c)
	if ti.have_multi_move then
		if r > row then ti.out(ti.parm_down_cursor, r-row) end
		if r < row then ti.out(ti.parm_up_cursor, row-r) end
		if c > col then ti.out(ti.parm_right_cursor, c-col) end
		if c < col then ti.out(ti.parm_left_cursor, col-c) end
		row, col = r, c
	else
		while r > row do ti.out(ti.cursor_down) row = row + 1 end
		while r < row do ti.out(ti.cursor_up) row = row - 1 end
		if math.abs(col - c) > c then ti.out(ti.carriage_return) col = 0 end
		while c > col do ti.out(ti.cursor_right) col = col + 1 end
		while c < col do ti.out(ti.cursor_left) col = col - 1 end
	end
end
local function move_to_pos(pos) move_to(row_and_col_from_pos(pos)) end




local line = {}
local pos = 1
local draw = false
while true do
	local k = read()
	if k == "EOF" then break 
	elseif k == "LEFT" then if pos > 1 then pos = pos - 1 end
	elseif k == "RIGHT" then if pos <= #line then pos = pos + 1 end
	elseif k == "BACKSPACE" then if pos > 1 then table.remove(line, pos-1) pos = pos - 1 draw = true end
	elseif k == "DELETE" then if pos < #line then table.remove(line, pos) draw = true end 
	elseif k == "GO_EOL" then pos = #line+1 
	elseif k == "GO_BOL" then pos = 1
	else
		table.insert(line, pos, k)
		pos = pos + 1
		draw = true
	end

	--
	-- Syntax analysis
	--
	local t = lpeg.match(table_of_tokens, table.concat(line))
	print(dump(t))
	print()


	if draw then
		move_to_pos(0)
		output(table.concat(line))
	end
	move_to_pos(pos-1)
	io.flush()
end


ti.term_restore()
