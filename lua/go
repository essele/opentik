#!/usr/bin/lua

--package.path = "./lib/?.lua;" .. package.path

--
-- Use our library autoloading mechanism
--
dofile("lib/lib.lua")



--
-- Cause each of the modules in core to be loaded
--
local function load_modules(dir)
	for file in posix.dirent.files(dir) do
		local mod = file:match("^(.*)%.lua$")

		if mod then
			_ = core[mod]
		end
	end
	return rc
end

load_modules("./core")


--dofile("route.lua")
--dofile("address.lua")
--dofile("core/ethernet.lua")


--
-- Pre-init the ethernet interfaces
--
local uu = lib.cf.set("/ip/address", nil, { ["address"] = "1.2.3.4/24", ["interface"] = "ether1" })

lib.cf.set("/interface/ethernet", "ether1", { ["disabled"] = false })
lib.cf.set("/ip/address", nil, { ["address"] = "3.0.0.1/24", ["interface"] = "ether2" })
lib.cf.set("/ip/route", nil, { ["dst-address"] = "0.0.0.0/0", ["gateway"] = "3.0.0.254", ["distance"] = 10 })
lib.cf.set("/ip/route", nil, { ["dst-address"] = "0.0.0.0/0", ["gateway"] = "4.0.0.1", ["distance"] = 20 })
lib.cf.set("/ip/route", nil, { ["dst-address"] = "0.0.0.0/0", ["gateway"] = "5.0.0.1", ["distance"] = 5 })
lib.cf.live("/ip/route", nil, { ["dst-address"] = "192.168.95.0/24", ["gateway"] = "5.2.0.1", ["distance"] = 25, ["routing-mark"] = 220 })
core.route.route_list()
lib.cf.print("/ip/route")

print("---")
--lib.cf.print("/interface/ethernet")
print("---")
--lib.cf.print("/ip/address")
print("---")
--lib.cf.set("/interface/ethernet", "ether1", { ["disabled"] = false })
--lib.cf.print("/ip/address")
--lib.cf.set("/ip/address", uu, { ["disabled"] = true })
--lib.cf.set("/ip/address", uu, { ["address"] = "5.5.5.6/24", ["disabled"] = false })
--lib.cf.set("/interface/ethernet", "ether1", { ["mtu"] = 1450 })
lib.cf.set("/ip/dhcp-client", nil, { ["interface"] = "ether1", ["disabled"] = false })
print(lib.cf.dump(CONFIG))

lib.event.init()
lib.cli.init()
while true do
	lib.event.poll()
end

os.exit(0)

set_cf("/ip/route", nil, { ["dst-address"] = "192.168.95.0/24" })
print(dump(CONFIG))

set_cf("/ip/route", "192.168.95.0/24|main|unicast|30", { ["dst-address"] = "192.168.100.0/24" })
print(dump(CONFIG))


os.exit(0)
set_cf("/interface/pppoe", nil, { ["name"] = "internet", ["default-name"] = "pppoe0", ["interface"] = "ether1" })
print("---------------------")
print(dump(CONFIG))
--set_cf("/interface/ethernet", "eth0", { ["mtu"] = 1800, ["fred"] = 45 } )
--os.exit(0)
--set_cf("/interface/ethernet", "ether1", { ["name"] = "banana0" } )
--set_cf("/interface/ethernet", "banana0", { ["name"] = "banaXna0" } )
set_cf("/interface/ipip", nil, { ["mtu"] = 12345 } )
print("---------------------")
print(dump(CONFIG))

for k,v in pairs(CONFIG["/interface"].cf) do
	print("k="..k.." type="..tostring(v["type"]))
end


os.exit(0)


-- Add item
set_cf("/ip/route", nil, { ["dst-address"] = "1.2.3.0/24" })
print(dump(CONFIG))
print("---------------------")
set_cf("/ip/route", { ["dst-address"] = "1.2.3.0/24" }, { ["dst-address"] = "2.2.2.2/24", ["pref-src"] = "bill" } )
print(dump(CONFIG))
print("---------------------")
set_cf("/ip/route", nil, { ["dst-address"] = "1.2.3.0/24" })
print(dump(CONFIG))
print("---------------------")



--add_live("/ip/route", { ["dst-address"] = "1.2.3.0/24", ["pref-src"] = "fred" })
--print(dump(CONFIG))
--del_live("/ip/route", "1.2.3.0/24")
--print("---------------------")
--print(dump(CONFIG))








