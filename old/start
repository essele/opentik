#!./luajit

OT_BASE_DIR="/home/essele/dev/opentik"
OT_MODULES=OT_BASE_DIR.."/lua/?.lua"
OT_LIBS=OT_BASE_DIR.."/c/?.so"

package.path = OT_MODULES
package.cpath = OT_LIBS..";/usr/lib/lua/5.1/?.so"

require("unit")			-- main support library
require("mosquitto")	-- mosquitto support
require("netlink")		-- netlink support
require("ListItem")		-- to support lists
require("lfs")			-- for filesystem activities

--
-- Create the CALLBACKS table so we can register callbacks
-- 
CB = {}

--
-- Recursive function to load the main unit and then any subunits
-- given a main unit name. We also use this to populate the empty
-- CB arrays for each of the modules
--
function load_unit(units, filename, index, cb)
	cb[index] = {}
	dofile("units/" .. filename)

	for _,subunit in ipairs(units) do
		local sub = string.match(subunit, "^"..filename.."%.([^%.]+)$");

		if(sub) then
			print("Found subunit " .. subunit .. " [sub="..sub.."]")
			load_unit(units, subunit, sub, cb[index])
		end
	end
end

--
-- We get a list of all units, then work out a load order based on primary units
-- first, followed by their subunits (i.e. same prefix with subunit after dot)
--
local units = {}

-- First build full list of names
local u
for u in lfs.dir("units") do 
	if(string.sub(u, 1, 1) ~= ".") then table.insert(units, u) end
end
table.sort(units)

-- Now for each of units, we load it and then all of its sub-units
for _,u in ipairs(units) do
	if(string.match(u, "^[^%.]+$")) then
		print("Found unit: " .. u)
		load_unit(units, u, u, CB)
	end
end


--[[
interface = Interface:new("gre")
--interface:set("mtu", 1492)
interface:set("local", "10.2.0.1")
interface:set("remote", "10.3.0.1")
interface:set("name", "grelee")

rc = interface:apply()

--interface:add_dependency("/state/interface/eth0", "up")


interface = Interface:new("ether")
interface:set("name", "ether1")
interface.scratch.origif = "eth0"
rc = interface:apply()


List.save("interface")
]]--

List.load("interface")

print("Apply returned " .. tostring(rc))
for k,v in pairs(interface.config) do
		print("INTERFACEconfig: "..k.."="..v)
end

for i,j in ipairs(LIST.interface) do
	print("ITEM "..i)
	for k,v in pairs(j.config) do
		print("CONFIG: "..k.."="..v)
	end
end

--interface = Interface:new("gre")
--interface:set("name", "fred")

function cb_addresses()
end
function cmd_interface(topic, req)
	print("Got command request: topic="..topic)
end

--netlink.watch("addr", cb_addresses, cb_addresses, cb_addresses)
--netlink.watch("link", cb_interface_add, cb_interface_mod, cb_interface_del)

--
--
--
--mosquitto.subscribe("/cmd/interface/+", cmd_interface)

print("HELLO")
while(1) do
	unit.service_loop()
end


